{"version":3,"sources":["components/common/pagination.jsx","components/common/like.jsx","components/booksTable.jsx","components/likedBooks.jsx","components/categories.jsx","components/books.jsx","utils/paginate.js","components/naviagtion.jsx","components/addBookForm.jsx","components/loginForm.jsx","components/adminPanel.jsx","components/notFound.jsx","components/bookDetails.jsx","App.js","serviceWorker.js","index.js"],"names":["Pagination","props","itemsCount","pageSize","currentPage","onPageChange","pagesCount","Math","ceil","pages","Array","keys","map","i","Fragment","aria-label","className","page","key","onClick","Like","liked","onClickToggle","heartClass","emptyHeart","fullHeart","icon","style","cursor","BooksTable","state","redirect","this","books","likedSet","onLike","onDelete","onSort","history","categories","to","book","push","title","has","author","get","category","src","image","Component","LikedBooks","Categories","onFilter","Dropdown","Toggle","variant","id","Menu","Item","cat","name","BooksView","Set","sortColumn","order","currentCategory","categories_lookup","Map","handleDelete","console","log","handleLike","filter","b","delete","add","setState","localStorage","setItem","JSON","stringify","handlePageChange","handleSort","column","handleFilter","url","require","axios","data","lookup","set","getItem","parse","filtered","slicedBooks","items","startIndex","slice","paginate","_","orderBy","length","Navigation","Navbar","sticky","bg","expand","Brand","href","aria-controls","Collapse","Nav","Link","Form","inline","Button","AddBookForm","handleAdd","e","preventDefault","onSubmit","htmlFor","rows","type","AdminPanel","logged_in","handleLogin","NotFound","BookDetails","match","params","App","path","process","component","exact","from","Boolean","window","location","hostname","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0773d42e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Pagination = props => {\n  const { itemsCount, pageSize, currentPage, onPageChange } = props;\n  const pagesCount = Math.ceil(itemsCount / pageSize);\n  if (pagesCount <= 1) return null;\n  const pages = [...Array(pagesCount).keys()].map(i => i + 1);\n  return (\n    <React.Fragment>\n      <nav aria-label=\"Page navigation example\">\n        <ul className=\"pagination\">\n          {pages.map(page => (\n            <li\n              key={page}\n              className={\n                page === currentPage ? \"page-item active\" : \"page-item\"\n              }\n            >\n              <a className=\"page-link\" onClick={() => onPageChange(page)}>\n                {page}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </React.Fragment>\n  );\n};\n\nPagination.propTypes = {\n  itemsCount: PropTypes.number.isRequired,\n  pageSize: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart as fullHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { faHeart as emptyHeart } from \"@fortawesome/free-regular-svg-icons\";\nimport PropTypes from \"prop-types\";\n\nconst Like = props => {\n  const { liked, onClickToggle } = props;\n  let heartClass = emptyHeart;\n  if (liked) {\n    heartClass = fullHeart;\n  }\n  return (\n    <React.Fragment>\n      <FontAwesomeIcon\n        onClick={onClickToggle}\n        icon={heartClass}\n        style={{ cursor: \"pointer\" }}\n      />\n    </React.Fragment>\n  );\n};\n\nLike.propTypes = {\n  liked: PropTypes.bool.isRequired,\n  onClickToggle: PropTypes.func.isRequired\n};\n\nexport default Like;\n","import React, { Component } from \"react\";\nimport Like from \"./common/like\";\nimport { Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nclass BooksTable extends Component {\n  state = {\n    redirect: false,\n  };\n\n  render() {\n    const {\n      books,\n      likedSet,\n      onLike,\n      onDelete,\n      onSort,\n      history,\n      categories,\n    } = this.props;\n\n    if (this.state.redirect) {\n      return <Redirect to={this.state.redirect} />;\n    }\n    return (\n      <div className=\"table-responsive\">\n        <table className=\"table table-hover\">\n          <thead>\n            <tr>\n              <th />\n              <th className=\"clickable\" onClick={() => onSort(\"title\")}>\n                Tytuł\n              </th>\n              <th className=\"clickable\" onClick={() => onSort(\"author\")}>\n                Autor(ka)\n              </th>\n              <th>Kategoria</th>\n              <th>Okładka</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {books.map((book) => (\n              <tr\n                className=\"clickable\"\n                onClick={() => history.push(`/books/${book.title}`)}\n                key={book.title}\n              >\n                <td>\n                  <Like\n                    liked={likedSet.has(book.title)}\n                    onClickToggle={() => onLike(book)}\n                  />\n                </td>\n                <td>{book.title}</td>\n                <td>{book.author}</td>\n                <td>{categories.get(book.category)}</td>\n                <td>\n                  <img src={`data:image/jpeg;base64,${book.image}`} />\n                </td>\n\n                <td>\n                  <button\n                    className=\"btn btn-danger btn-sm\"\n                    onClick={() => onDelete(book)}\n                  >\n                    X\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nBooksTable.propTypes = {\n  onLike: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default BooksTable;\n","import React from \"react\";\n\nconst LikedBooks = props => {\n  const { liked } = props;\n\n  return (\n    <React.Fragment>\n      <h3>Twoje polubione książki: </h3>\n      <ul>\n        {liked.map(book => (\n          <li key={book.title}>{book.title}</li>\n        ))}\n      </ul>\n    </React.Fragment>\n  );\n};\n\nexport default LikedBooks;\n","import React from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\n\nconst Categories = props => {\n  const { categories, onFilter } = props;\n  return (\n    <React.Fragment>\n      <Dropdown className=\"m-3\">\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n          Kategorie\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          <Dropdown.Item onClick={() => onFilter(null)}>\n            Wszystkie\n          </Dropdown.Item>\n          {categories.map(cat => (\n            <Dropdown.Item key={cat.id} onClick={() => onFilter(cat.id)}>\n              {cat.name}\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    </React.Fragment>\n  );\n};\n\nexport default Categories;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport BooksTable from \"./booksTable\";\nimport LikedBooks from \"./likedBooks\";\nimport _ from \"lodash\";\nimport Categories from \"./categories\";\n\nexport class BooksView extends Component {\n  state = {\n    books: [],\n    liked: [],\n    likedSet: new Set(),\n    pageSize: 2,\n    currentPage: 1,\n    sortColumn: {\n      name: \"title\",\n      order: \"asc\",\n    },\n    categories: [],\n    currentCategory: null,\n    categories_lookup: new Map(),\n  };\n\n  async componentDidMount() {\n    const url = require(\"../apiURL.json\");\n    const { data: books } = await axios.get(url.url + \"books\");\n    const { data: categories } = await axios.get(url.url + \"categories\");\n    this.setState({ books });\n    this.setState({ categories });\n    var lookup = new Map();\n    categories.map((cat) => lookup.set(cat.id, cat.name));\n    this.setState({ categories_lookup: lookup });\n    const liked =\n      localStorage.getItem(\"likedBooks\") === null\n        ? []\n        : JSON.parse(localStorage.getItem(\"likedBooks\"));\n    let likedSet = new Set();\n    liked.map((book) => likedSet.add(book.title));\n    this.setState({ liked, likedSet });\n  }\n\n  handleDelete = (book) => {\n    console.log(\"Deleting\" + book);\n  };\n\n  handleLike = (book) => {\n    let liked = this.state.liked;\n    let likedSet = this.state.likedSet;\n\n    if (likedSet.has(book.title)) {\n      liked = liked.filter((b) => b.title !== book.title);\n      likedSet.delete(book.title);\n    } else {\n      liked.push(book);\n      likedSet.add(book.title);\n    }\n\n    this.setState({ liked, likedSet });\n    localStorage.setItem(\"likedBooks\", JSON.stringify(liked));\n  };\n\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page });\n  };\n\n  handleSort = (column) => {\n    let sortColumn = this.state.sortColumn;\n    if (sortColumn.name === column) {\n      sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\n    } else {\n      sortColumn = { name: column, order: \"asc\" };\n    }\n    this.setState({ sortColumn });\n  };\n\n  handleFilter = (category) => {\n    console.log(category);\n    this.setState({ currentCategory: category });\n  };\n\n  render() {\n    const {\n      books,\n      liked,\n      likedSet,\n      pageSize,\n      currentPage,\n      sortColumn,\n      categories,\n      currentCategory,\n      categories_lookup,\n    } = this.state;\n    const filtered =\n      currentCategory !== null\n        ? books.filter((book) => book.category === currentCategory)\n        : books;\n    const sorted = _.orderBy(filtered, [sortColumn.name], [sortColumn.order]);\n    const slicedBooks = paginate(sorted, currentPage, pageSize);\n\n    if (books.length === 0)\n      return (\n        <div>\n          <h2>Ładowanie...</h2>\n        </div>\n      );\n    return (\n      <React.Fragment>\n        <Categories categories={categories} onFilter={this.handleFilter} />\n\n        <BooksTable\n          books={slicedBooks}\n          categories={categories_lookup}\n          likedSet={likedSet}\n          history={this.props.history}\n          onLike={this.handleLike}\n          onDelete={this.handleDelete}\n          onSort={this.handleSort}\n        />\n        <Pagination\n          itemsCount={books.length}\n          pageSize={pageSize}\n          onPageChange={this.handlePageChange}\n          currentPage={currentPage}\n        />\n        <LikedBooks liked={liked} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BooksView;\n","export function paginate(items, currentPage, pageSize) {\n  const startIndex = (currentPage - 1) * pageSize;\n  return items.slice(startIndex, startIndex + pageSize);\n}\n","import React, { Component } from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport { Nav, Navbar, Form, FormControl, Button } from \"react-bootstrap\";\n\nclass Navigation extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar sticky=\"top\" bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"/\">Biblioteka</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/\">Książki</Nav.Link>\n            </Nav>\n            <Form inline>\n              <Button variant=\"outline-dark\" href=\"/admin\">\n                Panel adminki\n              </Button>\n            </Form>\n          </Navbar.Collapse>\n        </Navbar>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Navigation;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass AddBookForm extends Component {\n  state = {\n    categories: [],\n  };\n\n  handleAdd = (e) => {\n    e.preventDefault();\n    console.log(\"DODAWANKO\");\n  };\n\n  async componentDidMount() {\n    const url = require(\"../apiURL.json\");\n    const { data: categories } = await axios.get(url.url + \"categories\");\n    this.setState({ categories });\n  }\n\n  render() {\n    const { categories } = this.state;\n    return (\n      <React.Fragment>\n        <form onSubmit={this.handleAdd}>\n          <div className=\"form-group\">\n            <label>Tytuł</label>\n            <input className=\"form-control\"></input>\n          </div>\n          <div className=\"form-group\">\n            <label>Autor(ka)</label>\n            <input className=\"form-control\"></input>\n          </div>\n          <div className=\"form-group\">\n            <label>Link</label>\n            <input className=\"form-control\"></input>\n          </div>\n          <div className=\"form-group\">\n            <label>Lokalizacja</label>\n            <input className=\"form-control\"></input>\n          </div>\n          <div className=\"form-group\">\n            <label>Ilość egzemplarzy</label>\n            <input className=\"form-control\"></input>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleFormControlSelect1\">Example select</label>\n            <select className=\"form-control\" id=\"exampleFormControlSelect1\">\n              {categories.map((category) => (\n                <option key={category.id}>{category.name}</option>\n              ))}\n              <option>Dodaj kategorię...</option>\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleFormControlTextarea1\">Opis książki</label>\n            <textarea className=\"form-control\" rows=\"3\"></textarea>\n          </div>\n          <div className=\"form-group\">\n            <label>Zdjęcie okładki</label>\n            <input type=\"file\" className=\"form-control-file\"></input>\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Dodaj\n          </button>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AddBookForm;\n","import React, { Component } from \"react\";\n\nclass LoginForm extends Component {\n  state = {\n    account: {\n      username: \"\",\n      password: \"\",\n    },\n\n    errors: null,\n  };\n\n  validate = () => {\n    const { account } = this.state;\n    const errors = [];\n    if (account.username === \"\") {\n      errors.push(\"Nazwa użytkowniczki jest wymagana.\");\n    }\n\n    if (account.password === \"\") {\n      errors.push(\"Hasło jest wymagane.\");\n    }\n\n    return errors.length === 0 ? null : errors;\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const errors = this.validate();\n    if (errors != null) {\n      this.setState({ errors });\n      return;\n    }\n    this.props.login();\n  };\n\n  handleChange = (e) => {\n    const account = { ...this.state.account };\n    account[e.currentTarget.name] = e.currentTarget.value;\n    this.setState({ account });\n  };\n\n  render() {\n    const { account, errors } = this.state;\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto form p-4\">\n              <h1>Zaloguj się</h1>\n              <form\n                className=\"justify-content-center\"\n                onSubmit={this.handleSubmit}\n              >\n                {errors && (\n                  <div className=\"alert alert-danger\">\n                    {errors.map((error) => (\n                      <h6 key={error}>{error}</h6>\n                    ))}\n                  </div>\n                )}\n                <div className=\"form-group\">\n                  <label>Nazwa użytkowniczki</label>\n                  <input\n                    onChange={this.handleChange}\n                    value={account.username}\n                    autoFocus\n                    name=\"username\"\n                    className=\"form-control\"\n                    placeholder=\"Podaj nazwę użytkowniczki\"\n                  ></input>\n                </div>\n                <div className=\"form-group\">\n                  <label>Hasło</label>\n                  <input\n                    onChange={this.handleChange}\n                    value={account.password}\n                    type=\"password\"\n                    name=\"password\"\n                    className=\"form-control\"\n                    id=\"exampleInputPassword1\"\n                    placeholder=\"Podaj hasło\"\n                  ></input>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Zaloguj\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React, { Component } from \"react\";\nimport LoginForm from \"./loginForm\";\nimport AddBookForm from \"./addBookForm\";\n\nclass AdminPanel extends Component {\n  state = {\n    logged_in: false,\n  };\n\n  handleLogin = () => {\n    this.setState({ logged_in: true });\n  };\n\n  render() {\n    return <AddBookForm />;\n    // if (!this.state.logged_in) return <LoginForm login={this.handleLogin} />;\n    // else {\n    //   return (\n    //     <React.Fragment>\n    //       <h1>Witaj</h1>\n    //     </React.Fragment>\n    //   );\n    // }\n  }\n}\n\nexport default AdminPanel;\n","import React from \"react\";\n\nconst NotFound = () => {\n  return <h1>Nie ma takiej strony :( </h1>;\n};\n\nexport default NotFound;\n","import React, { Component } from \"react\";\n\nconst BookDetails = props => {\n  return <h2>Szczegóły {props.match.params.title}</h2>;\n};\n\nexport default BookDetails;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport BooksView from \"./components/books\";\nimport Navigation from \"./components/naviagtion\";\nimport AdminPanel from \"./components/adminPanel\";\nimport NotFound from \"./components/notFound\";\nimport BookDetails from \"./components/bookDetails\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <React.Fragment>\n        <Navigation />\n        <main className=\"container m-3\">\n          <Switch>\n            <Route\n              path={process.env.PUBLIC_URL + \"/books/:title\"}\n              component={BookDetails}\n            ></Route>\n            <Route\n              path={process.env.PUBLIC_URL + \"/books\"}\n              exact\n              component={BooksView}\n            ></Route>\n            <Route\n              path={process.env.PUBLIC_URL + \"/admin\"}\n              component={AdminPanel}\n            ></Route>\n            <Route path=\"/not-found\" component={NotFound}></Route>\n            <Redirect from={process.env.PUBLIC_URL + \"/\"} exact to=\"/books\" />\n            <Redirect to={process.env.PUBLIC_URL + \"/not-found\"} />\n          </Switch>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}